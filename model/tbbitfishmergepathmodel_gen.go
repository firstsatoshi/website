// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbBitfishMergePathFieldNames          = builder.RawFieldNames(&TbBitfishMergePath{})
	tbBitfishMergePathRows                = strings.Join(tbBitfishMergePathFieldNames, ",")
	tbBitfishMergePathRowsExpectAutoSet   = strings.Join(stringx.Remove(tbBitfishMergePathFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbBitfishMergePathRowsWithPlaceHolder = strings.Join(stringx.Remove(tbBitfishMergePathFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbBitfishMergePathIdPrefix        = "cache:tbBitfishMergePath:id:"
	cacheTbBitfishMergePathMergePathPrefix = "cache:tbBitfishMergePath:mergePath:"
)

type (
	tbBitfishMergePathModel interface {
		Insert(ctx context.Context, data *TbBitfishMergePath) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbBitfishMergePath, error)
		FindOneByMergePath(ctx context.Context, mergePath string) (*TbBitfishMergePath, error)
		Update(ctx context.Context, data *TbBitfishMergePath) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbBitfishMergePathModel struct {
		sqlc.CachedConn
		table string
	}

	TbBitfishMergePath struct {
		Id         int64     `db:"id"`          // id
		MergePath  string    `db:"merge_path"`  // 合成路径
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 最后更新时间
	}
)

func newTbBitfishMergePathModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbBitfishMergePathModel {
	return &defaultTbBitfishMergePathModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_bitfish_merge_path`",
	}
}

func (m *defaultTbBitfishMergePathModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tbBitfishMergePathIdKey := fmt.Sprintf("%s%v", cacheTbBitfishMergePathIdPrefix, id)
	tbBitfishMergePathMergePathKey := fmt.Sprintf("%s%v", cacheTbBitfishMergePathMergePathPrefix, data.MergePath)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbBitfishMergePathIdKey, tbBitfishMergePathMergePathKey)
	return err
}

func (m *defaultTbBitfishMergePathModel) FindOne(ctx context.Context, id int64) (*TbBitfishMergePath, error) {
	tbBitfishMergePathIdKey := fmt.Sprintf("%s%v", cacheTbBitfishMergePathIdPrefix, id)
	var resp TbBitfishMergePath
	err := m.QueryRowCtx(ctx, &resp, tbBitfishMergePathIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbBitfishMergePathRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbBitfishMergePathModel) FindOneByMergePath(ctx context.Context, mergePath string) (*TbBitfishMergePath, error) {
	tbBitfishMergePathMergePathKey := fmt.Sprintf("%s%v", cacheTbBitfishMergePathMergePathPrefix, mergePath)
	var resp TbBitfishMergePath
	err := m.QueryRowIndexCtx(ctx, &resp, tbBitfishMergePathMergePathKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `merge_path` = ? limit 1", tbBitfishMergePathRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mergePath); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbBitfishMergePathModel) Insert(ctx context.Context, data *TbBitfishMergePath) (sql.Result, error) {
	tbBitfishMergePathIdKey := fmt.Sprintf("%s%v", cacheTbBitfishMergePathIdPrefix, data.Id)
	tbBitfishMergePathMergePathKey := fmt.Sprintf("%s%v", cacheTbBitfishMergePathMergePathPrefix, data.MergePath)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, tbBitfishMergePathRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MergePath)
	}, tbBitfishMergePathIdKey, tbBitfishMergePathMergePathKey)
	return ret, err
}

func (m *defaultTbBitfishMergePathModel) Update(ctx context.Context, newData *TbBitfishMergePath) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	tbBitfishMergePathIdKey := fmt.Sprintf("%s%v", cacheTbBitfishMergePathIdPrefix, data.Id)
	tbBitfishMergePathMergePathKey := fmt.Sprintf("%s%v", cacheTbBitfishMergePathMergePathPrefix, data.MergePath)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbBitfishMergePathRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.MergePath, newData.Id)
	}, tbBitfishMergePathIdKey, tbBitfishMergePathMergePathKey)
	return err
}

func (m *defaultTbBitfishMergePathModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTbBitfishMergePathIdPrefix, primary)
}

func (m *defaultTbBitfishMergePathModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbBitfishMergePathRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbBitfishMergePathModel) tableName() string {
	return m.table
}
