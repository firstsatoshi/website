// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbInscribeDataFieldNames          = builder.RawFieldNames(&TbInscribeData{})
	tbInscribeDataRows                = strings.Join(tbInscribeDataFieldNames, ",")
	tbInscribeDataRowsExpectAutoSet   = strings.Join(stringx.Remove(tbInscribeDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbInscribeDataRowsWithPlaceHolder = strings.Join(stringx.Remove(tbInscribeDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbInscribeDataIdPrefix = "cache:tbInscribeData:id:"
)

type (
	tbInscribeDataModel interface {
		Insert(ctx context.Context, data *TbInscribeData) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbInscribeData, error)
		Update(ctx context.Context, data *TbInscribeData) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbInscribeDataModel struct {
		sqlc.CachedConn
		table string
	}

	TbInscribeData struct {
		Id         int64     `db:"id"`          // id
		OrderId    string    `db:"order_id"`    // 订单id
		Data       string    `db:"data"`        // 铭文数据
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 最后更新时间
	}
)

func newTbInscribeDataModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbInscribeDataModel {
	return &defaultTbInscribeDataModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_inscribe_data`",
	}
}

func (m *defaultTbInscribeDataModel) Delete(ctx context.Context, id int64) error {
	tbInscribeDataIdKey := fmt.Sprintf("%s%v", cacheTbInscribeDataIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbInscribeDataIdKey)
	return err
}

func (m *defaultTbInscribeDataModel) FindOne(ctx context.Context, id int64) (*TbInscribeData, error) {
	tbInscribeDataIdKey := fmt.Sprintf("%s%v", cacheTbInscribeDataIdPrefix, id)
	var resp TbInscribeData
	err := m.QueryRowCtx(ctx, &resp, tbInscribeDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbInscribeDataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbInscribeDataModel) Insert(ctx context.Context, data *TbInscribeData) (sql.Result, error) {
	tbInscribeDataIdKey := fmt.Sprintf("%s%v", cacheTbInscribeDataIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, tbInscribeDataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.Data)
	}, tbInscribeDataIdKey)
	return ret, err
}

func (m *defaultTbInscribeDataModel) Update(ctx context.Context, data *TbInscribeData) error {
	tbInscribeDataIdKey := fmt.Sprintf("%s%v", cacheTbInscribeDataIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbInscribeDataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderId, data.Data, data.Id)
	}, tbInscribeDataIdKey)
	return err
}

func (m *defaultTbInscribeDataModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTbInscribeDataIdPrefix, primary)
}

func (m *defaultTbInscribeDataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbInscribeDataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbInscribeDataModel) tableName() string {
	return m.table
}
