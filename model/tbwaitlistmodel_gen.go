// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbWaitlistFieldNames          = builder.RawFieldNames(&TbWaitlist{})
	tbWaitlistRows                = strings.Join(tbWaitlistFieldNames, ",")
	tbWaitlistRowsExpectAutoSet   = strings.Join(stringx.Remove(tbWaitlistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbWaitlistRowsWithPlaceHolder = strings.Join(stringx.Remove(tbWaitlistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbWaitlistIdPrefix         = "cache:tbWaitlist:id:"
	cacheTbWaitlistBtcAddressPrefix = "cache:tbWaitlist:btcAddress:"
	cacheTbWaitlistEmailPrefix      = "cache:tbWaitlist:email:"
)

type (
	tbWaitlistModel interface {
		Insert(ctx context.Context, data *TbWaitlist) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbWaitlist, error)
		FindOneByBtcAddress(ctx context.Context, btcAddress string) (*TbWaitlist, error)
		FindOneByEmail(ctx context.Context, email string) (*TbWaitlist, error)
		Update(ctx context.Context, data *TbWaitlist) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbWaitlistModel struct {
		sqlc.CachedConn
		table string
	}

	TbWaitlist struct {
		Id         int64     `db:"id"`          // id
		Email      string    `db:"email"`       // 邮箱
		BtcAddress string    `db:"btc_address"` // BTC的P2TR格式地址
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 最后更新时间
	}
)

func newTbWaitlistModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbWaitlistModel {
	return &defaultTbWaitlistModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_waitlist`",
	}
}

func (m *defaultTbWaitlistModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tbWaitlistBtcAddressKey := fmt.Sprintf("%s%v", cacheTbWaitlistBtcAddressPrefix, data.BtcAddress)
	tbWaitlistEmailKey := fmt.Sprintf("%s%v", cacheTbWaitlistEmailPrefix, data.Email)
	tbWaitlistIdKey := fmt.Sprintf("%s%v", cacheTbWaitlistIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbWaitlistBtcAddressKey, tbWaitlistEmailKey, tbWaitlistIdKey)
	return err
}

func (m *defaultTbWaitlistModel) FindOne(ctx context.Context, id int64) (*TbWaitlist, error) {
	tbWaitlistIdKey := fmt.Sprintf("%s%v", cacheTbWaitlistIdPrefix, id)
	var resp TbWaitlist
	err := m.QueryRowCtx(ctx, &resp, tbWaitlistIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbWaitlistRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbWaitlistModel) FindOneByBtcAddress(ctx context.Context, btcAddress string) (*TbWaitlist, error) {
	tbWaitlistBtcAddressKey := fmt.Sprintf("%s%v", cacheTbWaitlistBtcAddressPrefix, btcAddress)
	var resp TbWaitlist
	err := m.QueryRowIndexCtx(ctx, &resp, tbWaitlistBtcAddressKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `btc_address` = ? limit 1", tbWaitlistRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, btcAddress); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbWaitlistModel) FindOneByEmail(ctx context.Context, email string) (*TbWaitlist, error) {
	tbWaitlistEmailKey := fmt.Sprintf("%s%v", cacheTbWaitlistEmailPrefix, email)
	var resp TbWaitlist
	err := m.QueryRowIndexCtx(ctx, &resp, tbWaitlistEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", tbWaitlistRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbWaitlistModel) Insert(ctx context.Context, data *TbWaitlist) (sql.Result, error) {
	tbWaitlistBtcAddressKey := fmt.Sprintf("%s%v", cacheTbWaitlistBtcAddressPrefix, data.BtcAddress)
	tbWaitlistEmailKey := fmt.Sprintf("%s%v", cacheTbWaitlistEmailPrefix, data.Email)
	tbWaitlistIdKey := fmt.Sprintf("%s%v", cacheTbWaitlistIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, tbWaitlistRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Email, data.BtcAddress)
	}, tbWaitlistBtcAddressKey, tbWaitlistEmailKey, tbWaitlistIdKey)
	return ret, err
}

func (m *defaultTbWaitlistModel) Update(ctx context.Context, newData *TbWaitlist) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	tbWaitlistBtcAddressKey := fmt.Sprintf("%s%v", cacheTbWaitlistBtcAddressPrefix, data.BtcAddress)
	tbWaitlistEmailKey := fmt.Sprintf("%s%v", cacheTbWaitlistEmailPrefix, data.Email)
	tbWaitlistIdKey := fmt.Sprintf("%s%v", cacheTbWaitlistIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbWaitlistRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Email, newData.BtcAddress, newData.Id)
	}, tbWaitlistBtcAddressKey, tbWaitlistEmailKey, tbWaitlistIdKey)
	return err
}

func (m *defaultTbWaitlistModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTbWaitlistIdPrefix, primary)
}

func (m *defaultTbWaitlistModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbWaitlistRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbWaitlistModel) tableName() string {
	return m.table
}
