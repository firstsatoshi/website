// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbBlindboxEventFieldNames          = builder.RawFieldNames(&TbBlindboxEvent{})
	tbBlindboxEventRows                = strings.Join(tbBlindboxEventFieldNames, ",")
	tbBlindboxEventRowsExpectAutoSet   = strings.Join(stringx.Remove(tbBlindboxEventFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbBlindboxEventRowsWithPlaceHolder = strings.Join(stringx.Remove(tbBlindboxEventFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbBlindboxEventIdPrefix = "cache:tbBlindboxEvent:id:"
)

type (
	tbBlindboxEventModel interface {
		Insert(ctx context.Context, data *TbBlindboxEvent) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbBlindboxEvent, error)
		Update(ctx context.Context, data *TbBlindboxEvent) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbBlindboxEventModel struct {
		sqlc.CachedConn
		table string
	}

	TbBlindboxEvent struct {
		Id                int64     `db:"id"`                  // id
		EventName         string    `db:"event_name"`          // 名称
		EventDescription  string    `db:"event_description"`   // 描述
		PriceSats         int64     `db:"price_sats"`          // 价格
		IsActive          int64     `db:"is_active"`           // 是否激活
		PaymentToken      string    `db:"payment_token"`       // 支付币种
		ImgUrl            string    `db:"img_url"`             // 图片url
		AverageImageBytes int64     `db:"average_image_bytes"` // 平均图片大小(字节数)
		Supply            int64     `db:"supply"`              // 供应量
		Avail             int64     `db:"avail"`               // 当前可用
		LockCount         int64     `db:"lock_count"`          // 锁定数量
		MintLimit         int64     `db:"mint_limit"`          // 单个地址限购数量
		OnlyWhitelist     int64     `db:"only_whitelist"`      // 是否只有白名单
		StartTime         time.Time `db:"start_time"`          // 开始时间
		EndTime           time.Time `db:"end_time"`            // 结束时间
		CreateTime        time.Time `db:"create_time"`         // 创建时间
		UpdateTime        time.Time `db:"update_time"`         // 最后更新时间
	}
)

func newTbBlindboxEventModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbBlindboxEventModel {
	return &defaultTbBlindboxEventModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_blindbox_event`",
	}
}

func (m *defaultTbBlindboxEventModel) Delete(ctx context.Context, id int64) error {
	tbBlindboxEventIdKey := fmt.Sprintf("%s%v", cacheTbBlindboxEventIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbBlindboxEventIdKey)
	return err
}

func (m *defaultTbBlindboxEventModel) FindOne(ctx context.Context, id int64) (*TbBlindboxEvent, error) {
	tbBlindboxEventIdKey := fmt.Sprintf("%s%v", cacheTbBlindboxEventIdPrefix, id)
	var resp TbBlindboxEvent
	err := m.QueryRowCtx(ctx, &resp, tbBlindboxEventIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbBlindboxEventRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbBlindboxEventModel) Insert(ctx context.Context, data *TbBlindboxEvent) (sql.Result, error) {
	tbBlindboxEventIdKey := fmt.Sprintf("%s%v", cacheTbBlindboxEventIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbBlindboxEventRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.EventName, data.EventDescription, data.PriceSats, data.IsActive, data.PaymentToken, data.ImgUrl, data.AverageImageBytes, data.Supply, data.Avail, data.LockCount, data.MintLimit, data.OnlyWhitelist, data.StartTime, data.EndTime)
	}, tbBlindboxEventIdKey)
	return ret, err
}

func (m *defaultTbBlindboxEventModel) Update(ctx context.Context, data *TbBlindboxEvent) error {
	tbBlindboxEventIdKey := fmt.Sprintf("%s%v", cacheTbBlindboxEventIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbBlindboxEventRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.EventName, data.EventDescription, data.PriceSats, data.IsActive, data.PaymentToken, data.ImgUrl, data.AverageImageBytes, data.Supply, data.Avail, data.LockCount, data.MintLimit, data.OnlyWhitelist, data.StartTime, data.EndTime, data.Id)
	}, tbBlindboxEventIdKey)
	return err
}

func (m *defaultTbBlindboxEventModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTbBlindboxEventIdPrefix, primary)
}

func (m *defaultTbBlindboxEventModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbBlindboxEventRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbBlindboxEventModel) tableName() string {
	return m.table
}
