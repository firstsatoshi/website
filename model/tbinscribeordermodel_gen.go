// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbInscribeOrderFieldNames          = builder.RawFieldNames(&TbInscribeOrder{})
	tbInscribeOrderRows                = strings.Join(tbInscribeOrderFieldNames, ",")
	tbInscribeOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(tbInscribeOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbInscribeOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(tbInscribeOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbInscribeOrderIdPrefix             = "cache:tbInscribeOrder:id:"
	cacheTbInscribeOrderDepositAddressPrefix = "cache:tbInscribeOrder:depositAddress:"
	cacheTbInscribeOrderOrderIdPrefix        = "cache:tbInscribeOrder:orderId:"
)

type (
	tbInscribeOrderModel interface {
		Insert(ctx context.Context, data *TbInscribeOrder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbInscribeOrder, error)
		FindOneByDepositAddress(ctx context.Context, depositAddress string) (*TbInscribeOrder, error)
		FindOneByOrderId(ctx context.Context, orderId string) (*TbInscribeOrder, error)
		Update(ctx context.Context, data *TbInscribeOrder) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbInscribeOrderModel struct {
		sqlc.CachedConn
		table string
	}

	TbInscribeOrder struct {
		Id               int64          `db:"id"`                 // id
		OrderId          string         `db:"order_id"`           // 订单id
		ContentType      string         `db:"content_type"`       // 类型: 如 image/img
		Count            int64          `db:"count"`              // 数量(批量)
		DepositAddress   string         `db:"deposit_address"`    // 充值地址
		FeeRate          int64          `db:"fee_rate"`           // 费率 n/sat
		DataBytes        int64          `db:"data_bytes"`         // 数据大小(字节数)
		TxfeeAmountSat   int64          `db:"txfee_amount_sat"`   // 矿工费
		ServiceFeeSat    int64          `db:"service_fee_sat"`    // 服务费
		TotalAmountSat   int64          `db:"total_amount_sat"`   // 总费用sat
		ReceiveAddress   string         `db:"receive_address"`    // 铭刻内容接收地址
		OrderStatus      string         `db:"order_status"`       // 订单状态: NOTPAID未支付;PAYPENDING支付确认中;PAYSUCCESS支付成功;PAYTIMEOUT超时未支付;MINTING铭刻交易等待确认中;ALLSUCCESS订单成功
		PayTime          sql.NullTime   `db:"pay_time"`           // 支付时间(进入内存池的时间)
		PayTxid          sql.NullString `db:"pay_txid"`           // 付款交易id(支持批量支付,即一笔交易多个输出到我们平台的收款地址,所以不必设置为唯一索引)
		PayConfirmedTime sql.NullTime   `db:"pay_confirmed_time"` // 付款交易确认时间
		PayFromAddress   sql.NullString `db:"pay_from_address"`   // 付款地址
		RealFeeSat       int64          `db:"real_fee_sat"`       // 实际矿工费
		RealChangeSat    int64          `db:"real_change_sat"`    // 实际找零(收入)
		Version          int64          `db:"version"`            // 版本号
		CreateTime       time.Time      `db:"create_time"`        // 创建时间
		UpdateTime       time.Time      `db:"update_time"`        // 最后更新时间
	}
)

func newTbInscribeOrderModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbInscribeOrderModel {
	return &defaultTbInscribeOrderModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_inscribe_order`",
	}
}

func (m *defaultTbInscribeOrderModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tbInscribeOrderDepositAddressKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderDepositAddressPrefix, data.DepositAddress)
	tbInscribeOrderIdKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderIdPrefix, id)
	tbInscribeOrderOrderIdKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderOrderIdPrefix, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbInscribeOrderDepositAddressKey, tbInscribeOrderIdKey, tbInscribeOrderOrderIdKey)
	return err
}

func (m *defaultTbInscribeOrderModel) FindOne(ctx context.Context, id int64) (*TbInscribeOrder, error) {
	tbInscribeOrderIdKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderIdPrefix, id)
	var resp TbInscribeOrder
	err := m.QueryRowCtx(ctx, &resp, tbInscribeOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbInscribeOrderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbInscribeOrderModel) FindOneByDepositAddress(ctx context.Context, depositAddress string) (*TbInscribeOrder, error) {
	tbInscribeOrderDepositAddressKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderDepositAddressPrefix, depositAddress)
	var resp TbInscribeOrder
	err := m.QueryRowIndexCtx(ctx, &resp, tbInscribeOrderDepositAddressKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `deposit_address` = ? limit 1", tbInscribeOrderRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, depositAddress); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbInscribeOrderModel) FindOneByOrderId(ctx context.Context, orderId string) (*TbInscribeOrder, error) {
	tbInscribeOrderOrderIdKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderOrderIdPrefix, orderId)
	var resp TbInscribeOrder
	err := m.QueryRowIndexCtx(ctx, &resp, tbInscribeOrderOrderIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", tbInscribeOrderRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbInscribeOrderModel) Insert(ctx context.Context, data *TbInscribeOrder) (sql.Result, error) {
	tbInscribeOrderDepositAddressKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderDepositAddressPrefix, data.DepositAddress)
	tbInscribeOrderIdKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderIdPrefix, data.Id)
	tbInscribeOrderOrderIdKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbInscribeOrderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.ContentType, data.Count, data.DepositAddress, data.FeeRate, data.DataBytes, data.TxfeeAmountSat, data.ServiceFeeSat, data.TotalAmountSat, data.ReceiveAddress, data.OrderStatus, data.PayTime, data.PayTxid, data.PayConfirmedTime, data.PayFromAddress, data.RealFeeSat, data.RealChangeSat, data.Version)
	}, tbInscribeOrderDepositAddressKey, tbInscribeOrderIdKey, tbInscribeOrderOrderIdKey)
	return ret, err
}

func (m *defaultTbInscribeOrderModel) Update(ctx context.Context, newData *TbInscribeOrder) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	tbInscribeOrderDepositAddressKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderDepositAddressPrefix, data.DepositAddress)
	tbInscribeOrderIdKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderIdPrefix, data.Id)
	tbInscribeOrderOrderIdKey := fmt.Sprintf("%s%v", cacheTbInscribeOrderOrderIdPrefix, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbInscribeOrderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.OrderId, newData.ContentType, newData.Count, newData.DepositAddress, newData.FeeRate, newData.DataBytes, newData.TxfeeAmountSat, newData.ServiceFeeSat, newData.TotalAmountSat, newData.ReceiveAddress, newData.OrderStatus, newData.PayTime, newData.PayTxid, newData.PayConfirmedTime, newData.PayFromAddress, newData.RealFeeSat, newData.RealChangeSat, newData.Version, newData.Id)
	}, tbInscribeOrderDepositAddressKey, tbInscribeOrderIdKey, tbInscribeOrderOrderIdKey)
	return err
}

func (m *defaultTbInscribeOrderModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTbInscribeOrderIdPrefix, primary)
}

func (m *defaultTbInscribeOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbInscribeOrderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbInscribeOrderModel) tableName() string {
	return m.table
}
