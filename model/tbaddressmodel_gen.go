// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbAddressFieldNames          = builder.RawFieldNames(&TbAddress{})
	tbAddressRows                = strings.Join(tbAddressFieldNames, ",")
	tbAddressRowsExpectAutoSet   = strings.Join(stringx.Remove(tbAddressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbAddressRowsWithPlaceHolder = strings.Join(stringx.Remove(tbAddressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbAddressIdPrefix                               = "cache:tbAddress:id:"
	cacheTbAddressAddressPrefix                          = "cache:tbAddress:address:"
	cacheTbAddressCoinTypeAccountIndexAddressIndexPrefix = "cache:tbAddress:coinType:accountIndex:addressIndex:"
)

type (
	tbAddressModel interface {
		Insert(ctx context.Context, data *TbAddress) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbAddress, error)
		FindOneByAddress(ctx context.Context, address string) (*TbAddress, error)
		FindOneByCoinTypeAccountIndexAddressIndex(ctx context.Context, coinType string, accountIndex int64, addressIndex int64) (*TbAddress, error)
		Update(ctx context.Context, data *TbAddress) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbAddressModel struct {
		sqlc.CachedConn
		table string
	}

	TbAddress struct {
		Id           int64     `db:"id"`            // id
		Address      string    `db:"address"`       // 地址
		CoinType     string    `db:"coin_type"`     // 地址类型,BTC,ETH,USDT
		AccountIndex int64     `db:"account_index"` // account_index
		AddressIndex int64     `db:"address_index"` // address_index
		CreateTime   time.Time `db:"create_time"`   // 创建时间
		UpdateTime   time.Time `db:"update_time"`   // 最后更新时间
	}
)

func newTbAddressModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbAddressModel {
	return &defaultTbAddressModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_address`",
	}
}

func (m *defaultTbAddressModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tbAddressAddressKey := fmt.Sprintf("%s%v", cacheTbAddressAddressPrefix, data.Address)
	tbAddressCoinTypeAccountIndexAddressIndexKey := fmt.Sprintf("%s%v:%v:%v", cacheTbAddressCoinTypeAccountIndexAddressIndexPrefix, data.CoinType, data.AccountIndex, data.AddressIndex)
	tbAddressIdKey := fmt.Sprintf("%s%v", cacheTbAddressIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbAddressAddressKey, tbAddressCoinTypeAccountIndexAddressIndexKey, tbAddressIdKey)
	return err
}

func (m *defaultTbAddressModel) FindOne(ctx context.Context, id int64) (*TbAddress, error) {
	tbAddressIdKey := fmt.Sprintf("%s%v", cacheTbAddressIdPrefix, id)
	var resp TbAddress
	err := m.QueryRowCtx(ctx, &resp, tbAddressIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbAddressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbAddressModel) FindOneByAddress(ctx context.Context, address string) (*TbAddress, error) {
	tbAddressAddressKey := fmt.Sprintf("%s%v", cacheTbAddressAddressPrefix, address)
	var resp TbAddress
	err := m.QueryRowIndexCtx(ctx, &resp, tbAddressAddressKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `address` = ? limit 1", tbAddressRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, address); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbAddressModel) FindOneByCoinTypeAccountIndexAddressIndex(ctx context.Context, coinType string, accountIndex int64, addressIndex int64) (*TbAddress, error) {
	tbAddressCoinTypeAccountIndexAddressIndexKey := fmt.Sprintf("%s%v:%v:%v", cacheTbAddressCoinTypeAccountIndexAddressIndexPrefix, coinType, accountIndex, addressIndex)
	var resp TbAddress
	err := m.QueryRowIndexCtx(ctx, &resp, tbAddressCoinTypeAccountIndexAddressIndexKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `coin_type` = ? and `account_index` = ? and `address_index` = ? limit 1", tbAddressRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, coinType, accountIndex, addressIndex); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbAddressModel) Insert(ctx context.Context, data *TbAddress) (sql.Result, error) {
	tbAddressAddressKey := fmt.Sprintf("%s%v", cacheTbAddressAddressPrefix, data.Address)
	tbAddressCoinTypeAccountIndexAddressIndexKey := fmt.Sprintf("%s%v:%v:%v", cacheTbAddressCoinTypeAccountIndexAddressIndexPrefix, data.CoinType, data.AccountIndex, data.AddressIndex)
	tbAddressIdKey := fmt.Sprintf("%s%v", cacheTbAddressIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tbAddressRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Address, data.CoinType, data.AccountIndex, data.AddressIndex)
	}, tbAddressAddressKey, tbAddressCoinTypeAccountIndexAddressIndexKey, tbAddressIdKey)
	return ret, err
}

func (m *defaultTbAddressModel) Update(ctx context.Context, newData *TbAddress) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	tbAddressAddressKey := fmt.Sprintf("%s%v", cacheTbAddressAddressPrefix, data.Address)
	tbAddressCoinTypeAccountIndexAddressIndexKey := fmt.Sprintf("%s%v:%v:%v", cacheTbAddressCoinTypeAccountIndexAddressIndexPrefix, data.CoinType, data.AccountIndex, data.AddressIndex)
	tbAddressIdKey := fmt.Sprintf("%s%v", cacheTbAddressIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbAddressRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Address, newData.CoinType, newData.AccountIndex, newData.AddressIndex, newData.Id)
	}, tbAddressAddressKey, tbAddressCoinTypeAccountIndexAddressIndexKey, tbAddressIdKey)
	return err
}

func (m *defaultTbAddressModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTbAddressIdPrefix, primary)
}

func (m *defaultTbAddressModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbAddressRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbAddressModel) tableName() string {
	return m.table
}
