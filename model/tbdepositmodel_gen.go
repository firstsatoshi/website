// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbDepositFieldNames          = builder.RawFieldNames(&TbDeposit{})
	tbDepositRows                = strings.Join(tbDepositFieldNames, ",")
	tbDepositRowsExpectAutoSet   = strings.Join(stringx.Remove(tbDepositFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbDepositRowsWithPlaceHolder = strings.Join(stringx.Remove(tbDepositFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbDepositIdPrefix            = "cache:tbDeposit:id:"
	cacheTbDepositToAddressTxidPrefix = "cache:tbDeposit:toAddress:txid:"
)

type (
	tbDepositModel interface {
		Insert(ctx context.Context, data *TbDeposit) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbDeposit, error)
		FindOneByToAddressTxid(ctx context.Context, toAddress string, txid string) (*TbDeposit, error)
		Update(ctx context.Context, data *TbDeposit) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbDepositModel struct {
		sqlc.CachedConn
		table string
	}

	TbDeposit struct {
		Id          int64     `db:"id"`           // id
		CoinType    string    `db:"coin_type"`    // 地址类型,BTC,ETH,USDT
		FromAddress string    `db:"from_address"` // from地址,如果是btc归集充值,显示输入的第一个地址
		ToAddress   string    `db:"to_address"`   // to地址
		Txid        string    `db:"txid"`         // txid
		Amount      int64     `db:"amount"`       // 金额(最小单位)
		Decimals    int64     `db:"decimals"`     // 精度(BTC: 8, ETH: 18, USDT: 6)
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 最后更新时间
	}
)

func newTbDepositModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbDepositModel {
	return &defaultTbDepositModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_deposit`",
	}
}

func (m *defaultTbDepositModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tbDepositIdKey := fmt.Sprintf("%s%v", cacheTbDepositIdPrefix, id)
	tbDepositToAddressTxidKey := fmt.Sprintf("%s%v:%v", cacheTbDepositToAddressTxidPrefix, data.ToAddress, data.Txid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbDepositIdKey, tbDepositToAddressTxidKey)
	return err
}

func (m *defaultTbDepositModel) FindOne(ctx context.Context, id int64) (*TbDeposit, error) {
	tbDepositIdKey := fmt.Sprintf("%s%v", cacheTbDepositIdPrefix, id)
	var resp TbDeposit
	err := m.QueryRowCtx(ctx, &resp, tbDepositIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbDepositRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbDepositModel) FindOneByToAddressTxid(ctx context.Context, toAddress string, txid string) (*TbDeposit, error) {
	tbDepositToAddressTxidKey := fmt.Sprintf("%s%v:%v", cacheTbDepositToAddressTxidPrefix, toAddress, txid)
	var resp TbDeposit
	err := m.QueryRowIndexCtx(ctx, &resp, tbDepositToAddressTxidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `to_address` = ? and `txid` = ? limit 1", tbDepositRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, toAddress, txid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbDepositModel) Insert(ctx context.Context, data *TbDeposit) (sql.Result, error) {
	tbDepositIdKey := fmt.Sprintf("%s%v", cacheTbDepositIdPrefix, data.Id)
	tbDepositToAddressTxidKey := fmt.Sprintf("%s%v:%v", cacheTbDepositToAddressTxidPrefix, data.ToAddress, data.Txid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, tbDepositRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CoinType, data.FromAddress, data.ToAddress, data.Txid, data.Amount, data.Decimals)
	}, tbDepositIdKey, tbDepositToAddressTxidKey)
	return ret, err
}

func (m *defaultTbDepositModel) Update(ctx context.Context, newData *TbDeposit) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	tbDepositIdKey := fmt.Sprintf("%s%v", cacheTbDepositIdPrefix, data.Id)
	tbDepositToAddressTxidKey := fmt.Sprintf("%s%v:%v", cacheTbDepositToAddressTxidPrefix, data.ToAddress, data.Txid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbDepositRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CoinType, newData.FromAddress, newData.ToAddress, newData.Txid, newData.Amount, newData.Decimals, newData.Id)
	}, tbDepositIdKey, tbDepositToAddressTxidKey)
	return err
}

func (m *defaultTbDepositModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTbDepositIdPrefix, primary)
}

func (m *defaultTbDepositModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbDepositRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbDepositModel) tableName() string {
	return m.table
}
